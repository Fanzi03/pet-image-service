import asyncio
import aiohttp
import base64
import logging
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class StabilityController:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with self.session.get(f"{self.base_url}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤: {data}")
                    return True
                return False
        except Exception as e:
            logger.error(f"–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def generate_image(self, prompt: str, width: int = 512, height: int = 512, 
                           steps: int = 20, guidance: float = 7.5) -> Optional[bytes]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            payload = {
                "prompt": prompt,
                "width": width,
                "height": height,
                "num_inference_steps": steps,
                "guidance_scale": guidance
            }
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º: {prompt}")
            
            async with self.session.post(f"{self.base_url}/generate", json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
                    image_data = base64.b64decode(data["image"])
                    logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
                    return image_data
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status} - {error_text}")
                    return None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    async def save_image(self, image_data: bytes, filename: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            output_dir = Path("output")
            output_dir.mkdir(exist_ok=True)
            
            filepath = output_dir / filename
            with open(filepath, 'wb') as f:
                f.write(image_data)
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    prompts = [
        "beautiful sunset over mountains",
        "cute cat sitting in a garden",
        "futuristic city with flying cars"
    ]
    
    async with StabilityController() as controller:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å...")
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ (–º–∞–∫—Å 2 –º–∏–Ω—É—Ç—ã)
        for attempt in range(24):  # 24 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = 2 –º–∏–Ω—É—Ç—ã
            if await controller.health_check():
                break
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/24, –∂–¥–µ–º...")
            await asyncio.sleep(5)
        else:
            logger.error("–°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º")
            return
        
        logger.info("–°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, prompt in enumerate(prompts, 1):
            print(f"\n--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/{len(prompts)} ---")
            
            image_data = await controller.generate_image(
                prompt=prompt,
                width=512,
                height=512,
                steps=20,
                guidance=7.5
            )
            
            if image_data:
                filename = f"image_{i:02d}_{prompt.replace(' ', '_')[:30]}.png"
                if await controller.save_image(image_data, filename):
                    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {filename}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {prompt}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prompt}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(1)
        
        print(f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'output'")

if __name__ == "__main__":
    asyncio.run(main())